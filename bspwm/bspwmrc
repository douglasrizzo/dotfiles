#! /bin/sh

# a script I made to start polybar asynchronously
start_polybar() {
  # Terminate already running bar instances
  killall -q polybar

  # Wait until the processes have been shut down
  while pgrep -u $UID -x polybar >/dev/null; do sleep .05; done

  # if the monitor exists, configure its polybar
  if [[ $SMALLMONITOR ]]; then
    MONITOR=$SMALLMONITOR polybar --reload single &
  fi
  if [[ $BIGMONITOR ]]; then
    MONITOR=$BIGMONITOR polybar --reload bottom &
    MONITOR=$BIGMONITOR polybar --reload top &
  fi
}

start_dunst() {
  # stop dunst if it has been started by any application that called notify-send
  # xgetres is an AUR application that allows us to get the values from Xresources
  killall -q dunst

  # Wait until the processes have been shut down
  while pgrep -u $UID -x dunst >/dev/null; do sleep .05; done

  dunst -config ~/.config/dunst/dunstrc \
    -cb "$(xgetres background)" \
    -lb "$(xgetres background)" \
    -nb "$(xgetres background)" \
    -cf "$(xgetres foreground)" \
    -lf "$(xgetres foreground)" \
    -nf "$(xgetres foreground)" \
    -bf "$(xgetres foreground)" \
    -frame_color "$(xgetres foreground)" &

  while ! pgrep -u $UID -x dunst >/dev/null; do sleep .05; done
}

# ~/.screenlayout/$(hostname).sh &

# grab number of active monitors and name of first monitor
NMONITORS=$(xrandr --listactivemonitors | tail +2 | wc -l)
MONITOR1=$(xrandr --listactivemonitors | tail -n 1 | awk '{$1=$1};1' | cut -d " " -f4)
# grab second monitor name, if it exists
if [[ $NMONITORS == 2 ]]; then
  MONITOR2=$(xrandr --listactivemonitors | tail -n 2 | head -n 1 | awk '{$1=$1};1' | cut -d " " -f4)
fi

# organize big and small monitors
if [[ $MONITOR1 == *"HDMI"* ]]; then
  BIGMONITOR=$MONITOR1
  SMALLMONITOR=$MONITOR2
else
  SMALLMONITOR=$MONITOR1
  BIGMONITOR=$MONITOR2
fi

# if the monitor exists, configure its resolution
if [[ $SMALLMONITOR ]]; then
  xrandr --output $SMALLMONITOR --mode 1366x768 --rotate normal
fi
if [[ $BIGMONITOR ]]; then
  xrandr --output $BIGMONITOR --primary --mode 1920x1080 --rotate normal
fi
xrandr --output VIRTUAL1 --off

# delegate bspwm desktops to each monitor
if [[ $NMONITORS == 2 ]]; then
  bspc monitor $SMALLMONITOR -d 1
  bspc monitor $BIGMONITOR -d 2 3 4 5 6 7 8 9
else
  bspc monitor -d 1 2 3 4 5 6 7 8 9
fi

# recover pywal theme
wal -R

# source the colors.
. "${HOME}/.cache/wal/colors.sh"

# Set the border colors.
bspc config normal_border_color "$color1"
bspc config active_border_color "$color2"
bspc config focused_border_color "$color15"
bspc config presel_feedback_color "$color1"

bspc config border_width 2
bspc config window_gap 2

bspc config split_ratio 0.5
bspc config borderless_monocle true
bspc config gapless_monocle true

start_polybar &

# -m is the mode, necessary for non-US keyboards
sxhkd -m 1 &
# picom --config $HOME/.config/picom.conf &
# hsetroot -solid black

start_dunst

~/.config/scripts/maybe_run.sh megasync &
~/.config/scripts/maybe_run.sh nm-applet &
~/.config/scripts/maybe_run.sh blueman-applet &
~/.config/scripts/maybe_run.sh xscreensaver &
~/.config/scripts/maybe_run.sh telegram-desktop &
~/.config/scripts/maybe_run.sh discord-ptb DiscordPtb &
