# i3 config file (v4)
#
# Please see http://i3wm.org/docs/userguide.html for a complete reference!

# Turn off laptop display if HDMI is connected
exec xrandr | grep 'HDMI-1 connected' && xrandr --output eDP-1 --off --output HDMI-1 --auto || \
   exec xrandr | grep 'HDMI1 connected' && xrandr --output eDP1 --off --output HDMI1 --auto

set $mod Mod4

# config path for all programs
set $i3_path ~/.config/i3
set $compton_path ~/.config
set $rofi_path ~/.config/rofi
set $dunst_path ~/.config/dunst
set $wallpaper_folder ~/Documents/Wallpapers/wallpapers
set $i3lock_folder ~/Documents/Wallpapers/desktop_screenshots

# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font xft:IBM Plex Sans 10

# Orange theme colors
# class                 border  backgr. text    indic.   child_border
client.focused          #000000 #000000 #ff8800 #FDF6E3
client.focused_inactive #333333 #333333 #c68844 #454948
client.unfocused        #222222 #444444 #c68844 #454948
client.urgent           #CB4B16 #fde7e2 #c68844 #d19826
client.placeholder      #000000 #0c0c0c #ffffff #000000

# Blue theme
# class                 border  backgr. text    indic.   child_border
# client.focused          #eeeeee #eeeeee #000000 #FDF6E3
# client.focused_inactive #cccccc #cccccc #444444 #454948
# client.unfocused        #aaaaaa #aaaaaa #444444 #454948
# client.urgent           #CB4B16 #FDF6E3 #1ABC9C #268BD2
# client.placeholder      #000000 #0c0c0c #ffffff #000000

client.background       #2B2C2B

# Color palette used for the terminal ( ~/.Xresources file )
# Colors are gathered based on the documentation:
# https://i3wm.org/docs/userguide.html#xresources
# Change the variable name at the place you want to match the color
# of your terminal like this:
# [example]
# If you want your bar to have the same background color as your
# terminal background change the line 362 from:
# background #14191D
# to:
# background $term_background
# Same logic applied to everything else.
set_from_resource $term_background background
set_from_resource $term_foreground foreground
set_from_resource $term_color0     color0
set_from_resource $term_color1     color1
set_from_resource $term_color2     color2
set_from_resource $term_color3     color3
set_from_resource $term_color4     color4
set_from_resource $term_color5     color5
set_from_resource $term_color6     color6
set_from_resource $term_color7     color7
set_from_resource $term_color8     color8
set_from_resource $term_color9     color9
set_from_resource $term_color10    color10
set_from_resource $term_color11    color11
set_from_resource $term_color12    color12
set_from_resource $term_color13    color13
set_from_resource $term_color14    color14
set_from_resource $term_color15    color15

# Hide window borders. Good when you have scroll bars (Fitts Law FTW)
# hide_edge_borders none|vertical|horizontal|both|smart
hide_edge_borders both

#new_window normal|none|pixel
new_window pixel 1
#new_float normal|none|pixel
new_float normal

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec terminator
bindsym $mod+KP_Enter exec terminator

# kill focused window
bindsym $mod+BackSpace kill

# change focus
bindsym $mod+j focus left
bindsym $mod+k focus down
bindsym $mod+l focus up
bindsym $mod+ccedilla focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+j move left
bindsym $mod+Shift+k move down
bindsym $mod+Shift+l move up
bindsym $mod+Shift+ccedilla move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+h split h

# split in vertical orientation
bindsym $mod+v split v

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
# bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# Workspace names and their applications, with shortcuts
# set $ws1 1:
# set $ws2 2:
# set $ws3 3:
# set $ws4 4:
# set $ws5 5:
# set $ws6 6:
# set $ws7 7:
# set $ws8 8:

set $ws1 1
set $ws2 2
set $ws3 3
set $ws4 4
set $ws5 5
set $ws6 6
set $ws7 7
set $ws8 8
set $ws9 9

set $command_f1 code
set $command_f2 firefox
set $command_f3 pcmanfm
set $command_f4 gitkraken
set $command_f5 telegram-desktop
set $command_f6 thunderbird
set $command_f7 spotify
set $command_f8 steam
set $command_f9 zotero

# assign [class="[Ss]ublime [Tt]ext"] $ws1
# assign [class="[Ff]irefox"] $ws2
# assign [class="PCManFM"] $ws3
# assign [class="[Gg]it[Kk]raken"] $ws4
# assign [class="[Tt]elegram"] $ws5
# assign [class="[Tt]hunderbird"] $ws6
# assign [class="[Ss]potify"] $ws7
# assign [class="[Ss]team"] $ws8

bindsym $mod+F1 exec $command_f1 || notify-send "Application $command_f1 does not exist"
bindsym $mod+F2 exec $command_f2 || notify-send "Application $command_f2 does not exist"
bindsym $mod+F3 exec $command_f3 || notify-send "Application $command_f3 does not exist"
bindsym $mod+F4 exec $command_f4 || notify-send "Application $command_f4 does not exist"
bindsym $mod+F5 exec $command_f5 || notify-send "Application $command_f5 does not exist"
bindsym $mod+F6 exec $command_f6 || notify-send "Application $command_f6 does not exist"
bindsym $mod+F7 exec $command_f7 || notify-send "Application $command_f7 does not exist"
bindsym $mod+F8 exec $command_f8 || notify-send "Application $command_f8 does not exist"

# bindsym $mod+Shift+F1 workspace $ws1; exec $command_f1 || notify-send "Application $command_f1 does not exist"
# bindsym $mod+Shift+F2 workspace $ws2; exec $command_f2 || notify-send "Application $command_f2 does not exist"
# bindsym $mod+Shift+F3 workspace $ws3; exec $command_f3 || notify-send "Application $command_f3 does not exist"
# bindsym $mod+Shift+F4 workspace $ws4; exec $command_f4 || notify-send "Application $command_f4 does not exist"
# bindsym $mod+Shift+F5 workspace $ws5; exec $command_f5 || notify-send "Application $command_f5 does not exist"
# bindsym $mod+Shift+F6 workspace $ws6; exec $command_f6 || notify-send "Application $command_f6 does not exist"
# bindsym $mod+Shift+F7 workspace $ws7; exec $command_f7 || notify-send "Application $command_f7 does not exist"
# bindsym $mod+Shift+F8 workspace $ws8; exec $command_f8 || notify-send "Application $command_f8 does not exist"
bindsym $mod+F9 exec $command_f9 || notify-send "Application $command_f9 does not exist"

# Switch back and forth between previous workspace
workspace_auto_back_and_forth no

# Prevent new windows from being focused
focus_on_window_activation none

# switch to workspace
bindsym $mod+1 workspace $ws1
bindsym $mod+2 workspace $ws2
bindsym $mod+3 workspace $ws3
bindsym $mod+4 workspace $ws4
bindsym $mod+5 workspace $ws5
bindsym $mod+6 workspace $ws6
bindsym $mod+7 workspace $ws7
bindsym $mod+8 workspace $ws8
bindsym $mod+9 workspace $ws9

# Move focused container to workspace
bindsym $mod+Ctrl+1 move container to workspace $ws1
bindsym $mod+Ctrl+2 move container to workspace $ws2
bindsym $mod+Ctrl+3 move container to workspace $ws3
bindsym $mod+Ctrl+4 move container to workspace $ws4
bindsym $mod+Ctrl+5 move container to workspace $ws5
bindsym $mod+Ctrl+6 move container to workspace $ws6
bindsym $mod+Ctrl+7 move container to workspace $ws7
bindsym $mod+Ctrl+8 move container to workspace $ws8
bindsym $mod+Ctrl+9 move container to workspace $ws9

# Move to workspace with focused container
bindsym $mod+Shift+1 move container to workspace $ws1; workspace $ws1
bindsym $mod+Shift+2 move container to workspace $ws2; workspace $ws2
bindsym $mod+Shift+3 move container to workspace $ws3; workspace $ws3
bindsym $mod+Shift+4 move container to workspace $ws4; workspace $ws4
bindsym $mod+Shift+5 move container to workspace $ws5; workspace $ws5
bindsym $mod+Shift+6 move container to workspace $ws6; workspace $ws6
bindsym $mod+Shift+7 move container to workspace $ws7; workspace $ws7
bindsym $mod+Shift+8 move container to workspace $ws8; workspace $ws8
bindsym $mod+Shift+9 move container to workspace $ws9; workspace $ws9

# same stuff, but with numpad
bindsym $mod+KP_1 workspace $ws1
bindsym $mod+KP_2 workspace $ws2
bindsym $mod+KP_3 workspace $ws3
bindsym $mod+KP_4 workspace $ws4
bindsym $mod+KP_5 workspace $ws5
bindsym $mod+KP_6 workspace $ws6
bindsym $mod+KP_7 workspace $ws7
bindsym $mod+KP_8 workspace $ws8
bindsym $mod+KP_9 workspace $ws9
bindsym $mod+Ctrl+KP_1 move container to workspace $ws1
bindsym $mod+Ctrl+KP_2 move container to workspace $ws2
bindsym $mod+Ctrl+KP_3 move container to workspace $ws3
bindsym $mod+Ctrl+KP_4 move container to workspace $ws4
bindsym $mod+Ctrl+KP_5 move container to workspace $ws5
bindsym $mod+Ctrl+KP_6 move container to workspace $ws6
bindsym $mod+Ctrl+KP_7 move container to workspace $ws7
bindsym $mod+Ctrl+KP_8 move container to workspace $ws8
bindsym $mod+Ctrl+KP_9 move container to workspace $ws9
bindsym $mod+Shift+KP_1 move container to workspace $ws1; workspace $ws1
bindsym $mod+Shift+KP_2 move container to workspace $ws2; workspace $ws2
bindsym $mod+Shift+KP_3 move container to workspace $ws3; workspace $ws3
bindsym $mod+Shift+KP_4 move container to workspace $ws4; workspace $ws4
bindsym $mod+Shift+KP_5 move container to workspace $ws5; workspace $ws5
bindsym $mod+Shift+KP_6 move container to workspace $ws6; workspace $ws6
bindsym $mod+Shift+KP_7 move container to workspace $ws7; workspace $ws7
bindsym $mod+Shift+KP_8 move container to workspace $ws8; workspace $ws8
bindsym $mod+Shift+KP_9 move container to workspace $ws9; workspace $ws9

# shortcuts to navigate through workspaces
bindsym $mod+Tab workspace next
bindsym $mod+Shift+Tab workspace prev
bindsym $mod+Next workspace next
bindsym $mod+Prior workspace prev

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"

# Floating windows
# Command: xprop
# Hint: After selecting a windows, search for WS_CLASS instance
# [class="program_name"]
for_window [class="Pavucontrol"] floating enable
for_window [window_role="pop-up"] floating enable
for_window [window_role="task_dialog"] floating enable
for_window [title="[Pp]references$"] floating enable
for_window [title="[Pp]references$" class="[Bb]rave"] floating disabled
for_window [class="[Xx]archiver$"] floating enable

# Use rofi instead of dmenu
bindsym $mod+space exec rofi -show combi
bindsym $mod+Mod1+space exec rofi -show run
bindsym $mod+t exec --no-startup-id pkill compton
bindsym $mod+Ctrl+t exec --no-startup-id compton --config $compton_path/compton.conf
bindsym Print exec --no-startup-id i3-scrot
bindsym $mod+Print --release exec --no-startup-id i3-scrot -w
bindsym $mod+Shift+Print --release exec --no-startup-id i3-scrot -s
bindsym $mod+Ctrl+x --release exec --no-startup-id xkill

# Touchpad controls
bindsym XF86TouchpadToggle exec $i3_path/scripts/toggletouchpad.sh # toggle touchpad

# Media controls
bindsym XF86AudioPlay exec playerctl play-pause
bindsym XF86AudioPause exec playerctl pause
bindsym XF86AudioStop exec playerctl stop
bindsym XF86AudioNext exec playerctl next
bindsym XF86AudioPrev exec playerctl previous

# Pulse Audio controls
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume 0 +5% #increase sound volume
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume 0 -5% #decrease sound volume
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute 0 toggle # mute sound

# Screen brightness controls
bindsym XF86MonBrightnessUp exec "xbacklight -inc 10 && notify-send 'brightness up' || notify-send 'trouble invoking xbacklight'"
bindsym XF86MonBrightnessDown exec "xbacklight -dec 10 && notify-send 'brightness down' || notify-send 'trouble invoking xbacklight'"

bindsym XF86HomePage exec firefox
bindsym XF86Mail exec thunderbird
bindsym XF86Calculator exec speedcrunch

# these other buttons exist, I just won't map them because maybe they have a role inside other software
# bindsym XF86Documents exec --no-startup-id notify-send "Documents"
# bindsym XF86Favorites exec --no-startup-id notify-send "Favorites"
# bindsym XF86AudioRecord exec --no-startup-id notify-send "AudioRecord"
# bindsym XF86AudioRewind exec --no-startup-id notify-send "AudioRewind"
# bindsym XF86New exec --no-startup-id notify-send "New"
# bindsym XF86Open exec --no-startup-id notify-send "Open"
# bindsym XF86Close exec --no-startup-id notify-send "Close"
# bindsym XF86Reply exec --no-startup-id notify-send "Reply"
# bindsym XF86MailForward exec --no-startup-id notify-send "MailForward"
# bindsym XF86Send exec --no-startup-id notify-send "Send"
# bindsym XF86Save exec --no-startup-id notify-send "Save"

# resize window (you can also use the mouse for that)
mode "resize" {
        # These bindings trigger as soon as you enter the resize mode

        # Pressing left will shrink the window’s width.
        # Pressing right will grow the window’s width.
        # Pressing up will shrink the window’s height.
        # Pressing down will grow the window’s height.
        bindsym j resize shrink width 5 px or 5 ppt
        bindsym k resize grow height 5 px or 5 ppt
        bindsym l resize shrink height 5 px or 5 ppt
        bindsym ccedilla resize grow width 5 px or 5 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 10 px or 10 ppt
        bindsym Down resize grow height 10 px or 10 ppt
        bindsym Up resize shrink height 10 px or 10 ppt
        bindsym Right resize grow width 10 px or 10 ppt

        # back to normal: Enter or Escape
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"


# System status mode
set $mode_system System [l]ock,l[o]gout,[s]uspend,[h]ibernate,[r]eboot,[p]oweroff
mode "$mode_system" {
      bindsym l exec --no-startup-id i3exit lock, mode "default"
      bindsym o exec --no-startup-id i3exit logout, mode "default"
      bindsym s exec --no-startup-id i3exit suspend, mode "default"
      bindsym h exec --no-startup-id i3exit hibernate, mode "default"
      bindsym r exec --no-startup-id i3exit reboot, mode "default"
      bindsym p exec --no-startup-id i3exit shutdown, mode "default"

      # Back to normal: Enter or Escape
      bindsym Return mode "default"
      bindsym Escape mode "default"
}
bindsym $mod+0 mode "$mode_system"

exec_always --no-startup-id ~/.config/polybar/launch.sh

# Start i3bar to display a workspace bar (plus the system information i3status
# finds out, if available)
# bar {
#       # Bar ID
#       id 0

#       # Set font
#       font xft:Noto Sans 10, FontAwesome 11

#       # py3status status bar
#       # status_command i3status -c $i3_path/i3status.conf
#       status_command py3status -c $i3_path/i3status.conf

#       # Fitt's law
#       tray_padding 0

#       # Bar position
#       position top

#       ## please set your primary output first. Example: 'xrandr --output eDP1 --primary'
#       #	tray_output primary
#       #	tray_output eDP1

#     	bindsym button4 nop
#     	bindsym button5 nop
#     	strip_workspace_numbers yes

#         colors {
#             background #111111
#             statusline #F9FAF9
#             separator  #454947

# #                              border  backgr. text
#             focused_workspace  #ffbb00 #ffbb00 #111111
#             active_workspace   #595B5B #353836 #FDF6E3
#             inactive_workspace #000000 #000000 #ff8800
#             binding_mode       #16a085 #2C2C2C #F9FAF9
#             urgent_workspace   #16a085 #FDF6E3 #E5201D
#         }
# }

# Screen lock
bindsym $mod+Shift+d exec i3lock -c 0F121B -e -f -i $(find $i3lock_folder -maxdepth 2 -name '*.png' -type f | shuf | head -n 1) -p win -t

# Autostart applications
exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1

################################################################################################
## sound-section - DO NOT EDIT if you wish to automatically upgrade Alsa -> Pulseaudio later! ##
################################################################################################

#exec --no-startup-id volumeicon
#bindsym $mod+Ctrl+m exec terminal -e 'alsamixer'
exec --no-startup-id pulseaudio
exec --no-startup-id pa-applet
bindsym $mod+Ctrl+m exec pavucontrol

################################################################################################

# Wallpaper #####################################################
exec_always --no-startup-id feh -z --bg-scale --no-fehbg $wallpaper_folder
# this line creates a service of some sort which updates the wallpaper every minute
exec --no-startup-id systemd-run --on-calendar='*:0/15' --user -- /usr/bin/feh -z --bg-scale --no-fehbg $wallpaper_folder
# to stop
# systemctl --user stop run-$really_long_string.timer.
# to see active timers
# systemctl --user list-timers
#################################################################

# Dunst notification daemon
exec --no-startup-id dunst -config $dunst_path/dunstrc
# exec --no-startup-id nitrogen --restore; sleep 1; compton -b
# exec --no-startup-id manjaro-hello
# Composite windowxit
# exec --no-startup-id compton --config $compton_path/compton.conf
exec --no-startup-id nm-applet
exec --no-startup-id xfce4-power-manager
exec --no-startup-id pamac-tray
# exec --no-startup-id conky
exec --no-startup-id blueman-applet
# exec --no-startup-id xautolock -time 10 -locker blurlock
exec_always --no-startup-id ff-theme-util
exec_always --no-startup-id fix_xcursor
exec megasync
exec telegram-desktop -startintray

set $mode_xrandr Output: (h) HDMI, (n) notebook
set $mode_xrandr_hdmi HDMI: (1) on, (0) off
set $mode_xrandr_notebook notebook: (1) on, (0) off
bindsym $mod+Shift+x mode "$mode_xrandr"
mode "$mode_xrandr" {
        bindsym h      mode "$mode_xrandr_hdmi"
        bindsym n      mode "$mode_xrandr_notebook"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_xrandr_hdmi" {
        bindsym 1  exec xrandr --output HDMI1 --auto, mode "default"
        bindsym 0 exec xrandr --output HDMI1 --off, mode "default"

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_xrandr_notebook" {
        bindsym 1  exec xrandr --output eDP1 --auto, mode "default"
        bindsym 0 exec xrandr --output eDP1 --off, mode "default"

        bindsym Return mode "default"
        bindsym Escape mode "default"
}

#############################
### settings for i3-gaps: ###
#############################

# Set inner/outer gaps
# gaps inner 0
# gaps outer 0

# Additionally, you can issue commands with the following syntax. This is useful to bind keys to changing the gap size.
# gaps inner|outer current|all set|plus|minus <px>
# gaps inner all set 10
# gaps outer all plus 5

# Smart gaps (gaps used if only more than one container on the workspace)
# smart_gaps on

# Smart borders (draw borders around container only if it is not the only container on this workspace)
# on|no_gaps (on=always activate and no_gaps=only activate if the gap size to the edge of the screen is 0)
# smart_borders on

# Press $mod+Shift+g to enter the gap mode. Choose o or i for modifying outer/inner gaps. Press one of + / - (in-/decrement for current workspace) or 0 (remove gaps for current workspace). If you also press Shift with these keys, the change will be global for all workspaces.
# set $mode_gaps Gaps: (o) outer, (i) inner
# set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
# set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)
# bindsym $mod+Shift+g mode "$mode_gaps"

# mode "$mode_gaps" {
#         bindsym o      mode "$mode_gaps_outer"
#         bindsym i      mode "$mode_gaps_inner"
#         bindsym Return mode "default"
#         bindsym Escape mode "default"
# }
# mode "$mode_gaps_inner" {
#         bindsym plus  gaps inner current plus 5
#         bindsym minus gaps inner current minus 5
#         bindsym 0     gaps inner current set 0

#         bindsym Shift+plus  gaps inner all plus 5
#         bindsym Shift+minus gaps inner all minus 5
#         bindsym Shift+0     gaps inner all set 0

#         bindsym Return mode "default"
#         bindsym Escape mode "default"
# }
# mode "$mode_gaps_outer" {
#         bindsym plus  gaps outer current plus 5
#         bindsym minus gaps outer current minus 5
#         bindsym 0     gaps outer current set 0

#         bindsym Shift+plus  gaps outer all plus 5
#         bindsym Shift+minus gaps outer all minus 5
#         bindsym Shift+0     gaps outer all set 0

#         bindsym Return mode "default"
#         bindsym Escape mode "default"
# }