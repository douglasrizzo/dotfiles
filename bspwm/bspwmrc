#! /bin/sh

detect_monitors() {
  # grab number of active monitors and name of first monitor
  NMONITORS=$(xrandr --listactivemonitors | tail +2 | wc -l)
  mon1=$(xrandr --listactivemonitors | tail -n 1 | awk '{$1=$1};1' | cut -d " " -f4)
  # grab second monitor name, if it exists
  if [[ $NMONITORS == 2 ]]; then
    mon2=$(xrandr --listactivemonitors | tail -n 2 | head -n 1 | awk '{$1=$1};1' | cut -d " " -f4)
  fi

  # organize big and small monitors
  if [[ $mon1 == *"HDMI"* ]]; then
    BIGMONITOR=$mon1
    SMALLMONITOR=$mon2
  else
    SMALLMONITOR=$mon1
    BIGMONITOR=$mon2
  fi
}

config_monitors() {
  if [[ ! $NMONITORS ]]; then
    detect_monitors
  fi

  # if the monitor exists, configure its resolution
  if [[ $1 -eq 0 ]]; then
    if [[ $SMALLMONITOR ]]; then
      xrandr --output $SMALLMONITOR --mode 1920x1080 --rotate normal
    fi
    if [[ $BIGMONITOR ]]; then
      xrandr --output $BIGMONITOR --primary --mode 1920x1080 --rotate normal
    fi

    if [[ $SMALLMONITOR && $BIGMONITOR ]]; then
      xrandr --output $SMALLMONITOR --left-of $BIGMONITOR
    fi
  fi

  if [[ $SMALLMONITOR && $BIGMONITOR ]]; then
    # delegate bspwm desktops to each monitor
    bspc monitor $SMALLMONITOR -d 1
    bspc monitor $BIGMONITOR -d 2 3 4 5 6 7 8 9
  else
    bspc monitor -d 1 2 3 4 5 6 7 8 9
  fi
}

config_colors() {
  # source the colors.
  . "${HOME}/.cache/wal/colors.sh"
  # recover pywal theme
  wal -R -o ~/.config/pywalfox_update.sh
}

config_wm() {
  if [[ ! $color1 ]]; then
    config_colors
  fi

  # Set the border colors.
  bspc config normal_border_color "$color1"
  bspc config active_border_color "$color2"
  bspc config focused_border_color "$color15"
  bspc config presel_feedback_color "$color1"

  bspc config border_width 2
  bspc config window_gap 2

  bspc config split_ratio 0.5
  bspc config borderless_monocle true
  bspc config gapless_monocle true
  bspc config single_monocle true
  bspc config remove_disabled_monitors true
  bspc config remove_unplugged_monitors true
  bspc config merge_overlapping_monitors true
}

# a script I made to start polybar asynchronously
start_polybar() {
  if [[ ! $NMONITORS ]]; then
    detect_monitors
  fi

  # Terminate already running bar instances
  killall -q polybar

  # Wait until the processes have been shut down
  while pgrep -u $UID -x polybar >/dev/null; do sleep .05; done

  # if the monitor exists, configure its polybar
  if [[ $BIGMONITOR ]]; then
    MONITOR=$BIGMONITOR polybar --reload single &
  fi
  if [[ $SMALLMONITOR ]]; then
    MONITOR=$SMALLMONITOR polybar --reload single &
  fi
}

start_dunst() {
  # stop dunst if it has been started by any application that called notify-send
  killall -q dunst

  # Wait until the processes have been shut down
  while pgrep -u $UID -x dunst >/dev/null; do sleep .05; done

  # xgetres is an AUR application that allows us to get the values from Xresources
  dunst -config ~/.config/dunst/dunstrc \
    -cb "$(xgetres background)" \
    -lb "$(xgetres background)" \
    -nb "$(xgetres background)" \
    -cf "$(xgetres foreground)" \
    -lf "$(xgetres foreground)" \
    -nf "$(xgetres foreground)" \
    -bf "$(xgetres foreground)" \
    -frame_color "$(xgetres foreground)" &

  while ! pgrep -u $UID -x dunst >/dev/null; do sleep .05; done
}

config_monitors $1
config_colors
config_wm

start_polybar &

# only try to start sxhkd and picom if they're not already running, regardless if starting or restarting bspwm
# -m is the mode, necessary for non-US keyboards
pidof sxhkd >/dev/null || sxhkd -m 1 &
pidof picom >/dev/null || picom --config $HOME/.config/picom.conf &
# hsetroot -solid black

start_dunst

if [[ $1 -eq 0 ]]; then
  pidof megasync >/dev/null || megasync &
  pidof nm-applet >/dev/null || nm-applet &
  pidof blueman-applet >/dev/null || blueman-applet &
  pidof xscreensaver >/dev/null || xscreensaver &
  pidof telegram-desktop >/dev/null || telegram-desktop &
  pidof Discord >/dev/null || discord &
fi
